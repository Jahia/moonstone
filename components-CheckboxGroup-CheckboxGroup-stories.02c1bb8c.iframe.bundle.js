"use strict";(self.webpackChunk_jahia_moonstone=self.webpackChunk_jahia_moonstone||[]).push([[7819],{"./src/components/CheckboxGroup/CheckboxGroup.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CheckboxGroup_stories});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),CheckboxGroup_context=__webpack_require__("./src/components/CheckboxGroup/CheckboxGroup.context.ts"),_excluded=["children","name","isDisabled","isReadOnly","className","onChange"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var CheckboxGroup=function CheckboxGroup(_ref){var children=_ref.children,name=_ref.name,isDisabled=_ref.isDisabled,isReadOnly=_ref.isReadOnly,className=_ref.className,onChange=_ref.onChange,props=function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(_ref,_excluded),provider={name,isDisabled,isReadOnly,onChange};return react.createElement(CheckboxGroup_context.I.Provider,{value:provider},react.createElement("div",_extends({},props,{className:(0,clsx.A)("flexCol",className)}),children))};CheckboxGroup.__docgenInfo={description:"",methods:[],displayName:"CheckboxGroup",props:{name:{required:!0,tsType:{name:"string"},description:"Set the same name to all CheckboxItem"},children:{required:!0,tsType:{name:"Array",elements:[{name:"ReactReactElement",raw:"React.ReactElement<CheckboxItemProps>",elements:[{name:"signature",type:"object",raw:"{\n    /**\n     * Identifier added to the input element\n     */\n    id: string;\n\n    /**\n     * The name of the input element, used to group values and on submitting HTML form\n     */\n    name?: string;\n\n    /**\n     * Checkbox label\n     */\n    label: string;\n\n    /**\n     * Whether the checkbox should be checked by default. (uncontrolled)\n     */\n    defaultChecked?: boolean;\n\n    /**\n     * Whether the checkbox should be checked. Must be used with onChange function to update the checked state (controlled)\n     */\n    checked?: boolean;\n\n    /**\n     * The value of the input element, used when submitting an HTML form\n     */\n    value: string;\n\n    /**\n     * Checkbox description\n     */\n    description?: string;\n\n    /**\n     * Additional classname(s)\n     */\n    className?: string;\n\n    /**\n     * Whether the CheckboxItem should be disabled\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Whether the CheckboxItem can be selected but not changed by the user\n     */\n    isReadOnly?: boolean;\n\n    /**\n     * Function triggered on focus of the CheckboxItem\n     */\n    onFocus?: React.FocusEventHandler;\n\n    /**\n     * Function triggered when the CheckboxItem loses focus\n     */\n    onBlur?: React.FocusEventHandler;\n\n    /**\n     * Function triggered when the CheckboxItem changes state\n     */\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void;\n}",signature:{properties:[{key:"id",value:{name:"string",required:!0},description:"Identifier added to the input element"},{key:"name",value:{name:"string",required:!1},description:"The name of the input element, used to group values and on submitting HTML form"},{key:"label",value:{name:"string",required:!0},description:"Checkbox label"},{key:"defaultChecked",value:{name:"boolean",required:!1},description:"Whether the checkbox should be checked by default. (uncontrolled)"},{key:"checked",value:{name:"boolean",required:!1},description:"Whether the checkbox should be checked. Must be used with onChange function to update the checked state (controlled)"},{key:"value",value:{name:"string",required:!0},description:"The value of the input element, used when submitting an HTML form"},{key:"description",value:{name:"string",required:!1},description:"Checkbox description"},{key:"className",value:{name:"string",required:!1},description:"Additional classname(s)"},{key:"isDisabled",value:{name:"boolean",required:!1},description:"Whether the CheckboxItem should be disabled"},{key:"isReadOnly",value:{name:"boolean",required:!1},description:"Whether the CheckboxItem can be selected but not changed by the user"},{key:"onFocus",value:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler",required:!1},description:"Function triggered on focus of the CheckboxItem"},{key:"onBlur",value:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler",required:!1},description:"Function triggered when the CheckboxItem loses focus"},{key:"onChange",value:{name:"signature",type:"function",raw:"(event: React.ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void",signature:{arguments:[{type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},name:"event"},{type:{name:"string"},name:"value"},{type:{name:"boolean"},name:"checked"}],return:{name:"void"}},required:!1},description:"Function triggered when the CheckboxItem changes state"}]}}]}],raw:"React.ReactElement<CheckboxItemProps>[]"},description:"CheckboxItem component"},className:{required:!1,tsType:{name:"string"},description:"Additional classname"},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: React.ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void",signature:{arguments:[{type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},name:"event"},{type:{name:"string"},name:"value"},{type:{name:"boolean"},name:"checked"}],return:{name:"void"}}},description:"Function triggered on change of all CheckboxItems. That function is not replaced the onChange function set on a CheckboxItem, In that case both functions will be executed."},isDisabled:{required:!1,tsType:{name:"boolean"},description:"Whether the checkboxes should be disabled"},isReadOnly:{required:!1,tsType:{name:"boolean"},description:"Whether the checkboxes can be selected but not changed by the user"}}};var CheckboxItem=__webpack_require__("./src/components/CheckboxGroup/CheckboxItem/CheckboxItem.tsx");const CheckboxGroup_stories={title:"Components/CheckboxGroup",component:CheckboxGroup,parameters:{layout:"centered",knobs:{disable:!0},storysource:{disable:!0},actions:{argTypesRegex:"^on.*"}},argTypes:{children:{table:{disable:!0}}}},Template=args=>react.createElement(CheckboxGroup,args,react.createElement(CheckboxItem.H,{id:"cat",label:"Cat",description:"Miaouw",value:"cat"}),react.createElement(CheckboxItem.H,{id:"dog",label:"Dog",description:"Ouah-ouah",value:"dog"}),react.createElement(CheckboxItem.H,{isDisabled:!0,id:"horse",label:"Horse",description:"Disabled element",value:"horse"}),react.createElement(CheckboxItem.H,{id:"bird",label:"Bird without description",value:"bird"})),Default={render:Template,args:{name:"default"}},Disabled={render:Template,args:{name:"disabled",isDisabled:!0}},__namedExportsOrder=["Default","Disabled"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    name: 'default'\n  }\n}",...Default.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    name: 'disabled',\n    isDisabled: true\n  }\n}",...Disabled.parameters?.docs?.source}}}}}]);