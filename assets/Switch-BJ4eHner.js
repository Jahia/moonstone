import{j as t}from"./jsx-runtime-Cf8x2fCZ.js";import{R as g,r as f}from"./index-G8LIXM5I.js";import{c as u}from"./clsx-B-dksMZM.js";const y=({className:e,checked:n=!1,value:a,onChange:o=()=>{},isDisabled:l,...d},c)=>{const i=f.useRef();return t.jsxs("div",{ref:c,className:u("moonstone-switch",{"moonstone-switch_checked":n,"moonstone-switch_disabled":l},e),children:[t.jsx("input",{...d,ref:i,className:u("moonstone-switch_input"),type:"checkbox",value:a,checked:n,disabled:l,"aria-checked":n,onChange:h=>{var p;return typeof o=="function"&&o(h,a,(p=i.current)==null?void 0:p.checked)}}),t.jsx("span",{className:u("moonstone-switch_icon")})]})},s=g.forwardRef(y);s.displayName="ControlledSwitch";try{s.displayName="ControlledSwitch",s.__docgenInfo={description:"",displayName:"ControlledSwitch",props:{value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},onChange:{defaultValue:{value:"() => undefined"},description:"Function triggered on change",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}}}}}catch{}const r=({defaultChecked:e=!1,onChange:n,value:a,...o})=>{const[l,d]=f.useState(e);return t.jsx(s,{...o,value:a,checked:l,onChange:c=>{const i=!l;d(i),typeof n=="function"&&n(c,a,i)}})};r.displayName="UncontrolledSwitch";try{r.displayName="UncontrolledSwitch",r.__docgenInfo={description:"",displayName:"UncontrolledSwitch",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}}}}}catch{}const m=({checked:e,...n})=>typeof e>"u"?t.jsx(r,{...n}):t.jsx(s,{checked:e,...n});m.displayName="Switch";try{m.displayName="Switch",m.__docgenInfo={description:"",displayName:"Switch",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}}}}}catch{}export{m as S};
