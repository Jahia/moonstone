import{j as n}from"./jsx-runtime-Cf8x2fCZ.js";import{R as N,r as T}from"./index-G8LIXM5I.js";import{c as f}from"./clsx-B-dksMZM.js";/* empty css               */import{L as E}from"./Loader-DsiRlRl8.js";import{T as B}from"./Typography-C8hU4Ja4.js";import{S as x}from"./Apps-hI2F7AUr.js";import"./index-yBjzXJbu.js";import"./_commonjsHelpers-CqkleIqs.js";const i=({isPressed:e,...t})=>typeof e>"u"?n.jsx(p,{...t}):n.jsx(d,{isPressed:e,...t});i.displayName="ButtonToggle";try{i.displayName="ButtonToggle",i.__docgenInfo={description:"",displayName:"ButtonToggle",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},label:{defaultValue:null,description:"Button label",name:"label",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"Icon size",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},iconStart:{defaultValue:null,description:"Optional icon element to render on the left of the label or without label",name:"iconStart",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},iconEnd:{defaultValue:null,description:"Optional icon element to render on the right of the label, it's only display when a label is provided",name:"iconEnd",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},isDisabled:{defaultValue:null,description:"Is button disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReversed:{defaultValue:null,description:"Is button color reversed",name:"isReversed",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Is button loading",name:"isLoading",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Function trigger on click",name:"onClick",required:!1,type:{name:"MouseEventHandler<Element>"}},isPressed:{defaultValue:null,description:"Is button pressed",name:"isPressed",required:!1,type:{name:"boolean"}},defaultPressed:{defaultValue:null,description:"Is button pressed by default",name:"defaultPressed",required:!1,type:{name:"boolean"}}}}}catch{}const C=({label:e,size:t="default",isReversed:o=!1,isDisabled:u=!1,isLoading:a=!1,isPressed:r=!1,iconStart:l,iconEnd:m,className:v,onChange:V=()=>{},onClick:h,...q},_)=>{const R=s=>{h(s),s.currentTarget.blur(),!u&&!a&&V(s,!r)};return n.jsxs("button",{ref:_,className:f("moonstone-buttonToggle","moonstone-button",`moonstone-button_${t}`,{"moonstone-icon":e&&(l||m)},{"moonstone-icon-button":!e},{"moonstone-reverse":o},{"moonstone-button_loading":a},{"moonstone-buttonToggle_pressed":r},"flexRow_center","alignCenter",v),"aria-pressed":r,"data-loading":a,type:"button",disabled:u||a,onClick:s=>R(s),...q,children:[l&&!a&&n.jsx(l.type,{...l.props,size:t==="big"?"default":t}),a&&n.jsx(E,{size:"small",className:f({"moonstone-button_loaderOverlay":!l})}),e&&n.jsx(B,{isNowrap:!0,component:"span",variant:"button",isUpperCase:t==="big",weight:t==="big"?"semiBold":"default",className:f("flexFluid"),children:e}),e&&m&&n.jsx(m.type,{...m.props,size:t==="big"?"default":t})]})},d=N.forwardRef(C);d.displayName="ControlledButtonToggle";try{d.displayName="ControlledButtonToggle",d.__docgenInfo={description:"",displayName:"ControlledButtonToggle",props:{label:{defaultValue:null,description:"Button label",name:"label",required:!1,type:{name:"ReactNode"}},size:{defaultValue:{value:"default"},description:"Icon size",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Function trigger on click",name:"onClick",required:!1,type:{name:"MouseEventHandler<Element>"}},isDisabled:{defaultValue:{value:"false"},description:"Is button disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},iconStart:{defaultValue:null,description:"Optional icon element to render on the left of the label or without label",name:"iconStart",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},iconEnd:{defaultValue:null,description:"Optional icon element to render on the right of the label, it's only display when a label is provided",name:"iconEnd",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},isReversed:{defaultValue:{value:"false"},description:"Is button color reversed",name:"isReversed",required:!1,type:{name:"boolean"}},isPressed:{defaultValue:{value:"false"},description:"Is button pressed",name:"isPressed",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:{value:"false"},description:"Is button loading",name:"isLoading",required:!1,type:{name:"boolean"}}}}}catch{}const p=({defaultPressed:e=!1,onClick:t,...o})=>{const[u,a]=T.useState(e);return n.jsx(d,{...o,isPressed:u,onClick:r=>{a(l=>!l),typeof t=="function"&&t(r)}})};p.displayName="UncontrolledButtonToggle";try{p.displayName="UncontrolledButtonToggle",p.__docgenInfo={description:"",displayName:"UncontrolledButtonToggle",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},label:{defaultValue:null,description:"Button label",name:"label",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"Icon size",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},iconStart:{defaultValue:null,description:"Optional icon element to render on the left of the label or without label",name:"iconStart",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},iconEnd:{defaultValue:null,description:"Optional icon element to render on the right of the label, it's only display when a label is provided",name:"iconEnd",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},isDisabled:{defaultValue:null,description:"Is button disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReversed:{defaultValue:null,description:"Is button color reversed",name:"isReversed",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Is button loading",name:"isLoading",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Function trigger on click",name:"onClick",required:!1,type:{name:"MouseEventHandler<Element>"}},defaultPressed:{defaultValue:{value:"false"},description:"Is button pressed by default",name:"defaultPressed",required:!1,type:{name:"boolean"}}}}}catch{}const I="data:text/markdown;base64,IyMgRGVzaWduOgoKW0ZpZ21hXShodHRwczovL3d3dy5maWdtYS5jb20vZGVzaWduLzkzOWJXNzRDM1RMVzVWQXpLMjN1b3gvbW9vbnN0b25lLWNvbXBvbmVudHM/bm9kZS1pZD0xMTQ0Ny0xMTIyKQ==",W={title:"Components/ButtonToggle",component:i,parameters:{layout:"centered",actions:{argTypesRegex:"^on.*"},notes:{markdown:I}}},k=(e,t)=>{const o=t.theme;return n.jsx(i,{...e,isReversed:o==="dark"})},c={args:{iconStart:n.jsx(x,{}),label:"ButtonToggle"},render:k};var g,b,y;c.parameters={...c.parameters,docs:{...(g=c.parameters)==null?void 0:g.docs,source:{originalSource:`{
  args: {
    iconStart: <Apps />,
    label: 'ButtonToggle'
  },
  render: Template
}`,...(y=(b=c.parameters)==null?void 0:b.docs)==null?void 0:y.source}}};const H=["Default"];export{c as Default,H as __namedExportsOrder,W as default};
