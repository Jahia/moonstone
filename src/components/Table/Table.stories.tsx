import React from 'react';
import {useRowSelect, useTable} from 'react-table';

import {
    Checkbox,
    Table,
    TableHead,
    TableHeadCell,
    TableRow,
    TableBody,
    TableBodyCell,
    Typography
} from '~/components';
import {tableDataFlat} from '~/data/tableDataFlat';

export default {
    title: 'AAA/Table',
    component: Table,
    parameters: {
        controls: {disable: true},
        knobs: {disable: true},
        actions: {argTypesRegex: '^on.*'}
    }
};

export const Basic = () => (
    <Table>
    <TableHead>
        <TableRow>
            <TableHeadCell>first column</TableHeadCell>
            <TableHeadCell>second column</TableHeadCell>
            <TableHeadCell>third column</TableHeadCell>
        </TableRow>
    </TableHead>
    <TableBody>
        <TableRow>
            <TableBodyCell>cell 1</TableBodyCell>
            <TableBodyCell>cell 2</TableBodyCell>
            <TableBodyCell>cell 3</TableBodyCell>
        </TableRow>
        <TableRow>
            <TableBodyCell>cell 4</TableBodyCell>
            <TableBodyCell>cell 5</TableBodyCell>
            <TableBodyCell>cell 6</TableBodyCell>
        </TableRow>
        <TableRow>
            <TableBodyCell>cell 7</TableBodyCell>
            <TableBodyCell>cell 8</TableBodyCell>
            <TableBodyCell>cell 9</TableBodyCell>
        </TableRow>
    </TableBody>
    </Table>
);

export const BasicReactTable = () => {
    const data = React.useMemo(() => tableDataFlat, []);
    // TODO: figure out why there's a type mis-match with columns when it's used below to
    // TODO: instantiate the table
    const columns: any = React.useMemo(() => [
        {Header: 'Name', accessor: 'name'},
        {Header: 'Type', accessor: 'type'},
        {Header: 'Created By', accessor: 'createdBy'},
        {Header: 'Last Modified On', accessor: 'lastModifiedOn'}
    ], []);

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        rows,
        prepareRow
    } = useTable(
        {
            data,
            columns
        }
    );

    return (
        <Table {...getTableProps()}>
            <TableHead>
                {headerGroups.map(headerGroup => (
                    // a key is generated by the getHeadderGroupProps method and all further
                    // prop getters that are used when a key is necessary
                    // tslint:disable-next-line:jsx-key
                    <TableRow {...headerGroup.getHeaderGroupProps()}>
                        {headerGroup.headers.map(column => (
                            // tslint:disable-next-line:jsx-key
                            <TableHeadCell {...column.getHeaderProps()}>
                                {column.render('Header')}
                            </TableHeadCell>
                        ))}
                    </TableRow>
                ))}
            </TableHead>
            <TableBody {...getTableBodyProps()}>
                {rows.map(row => {
                    prepareRow(row);
                    return (
                        // tslint:disable-next-line:jsx-key
                        <TableRow {...row.getRowProps()}>
                            {row.cells.map(cell => (
                                // tslint:disable-next-line:jsx-key
                                <TableBodyCell {...cell.getCellProps()}>
                                    <Typography>{cell.render('Cell')}</Typography>
                                </TableBodyCell>
                            ))}
                        </TableRow>
                    );
                })}
            </TableBody>
        </Table>
    );
};
BasicReactTable.storyName = 'Basic Table with React-Table';

const IndeterminateCheckbox = React.forwardRef(
    ({ indeterminate, ...rest }, ref) => {
        const defaultRef = React.useRef()
        const resolvedRef = ref || defaultRef

        React.useEffect(() => {
            resolvedRef.current.indeterminate = indeterminate
        }, [resolvedRef, indeterminate])

        return (
            <>
                <input type="checkbox" ref={resolvedRef} {...rest} />
            </>
        )
    }
)

export const SelectableRows = () => {
    const data = React.useMemo(() => tableDataFlat, []);
    const columns: any = React.useMemo(() => [
        {
            id: 'selection',
            Header: ({getToggleAllRowsSelectedProps}) => (
                <div>
                    <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()}/>
                </div>
            ),
            Cell: ({row}) => (
                <div>
                    <IndeterminateCheckbox {...row.getToggleRowSelectedProps()}/>
                </div>
            )
        },
        {Header: 'Name', accessor: 'name'},
        {Header: 'Type', accessor: 'type'},
        {Header: 'Created By', accessor: 'createdBy'},
        {Header: 'Last Modified On', accessor: 'lastModifiedOn'}
    ], []);

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        rows,
        prepareRow,
        // TODO: why are these causing ts-lint issues ðŸ˜¡
        selectedFlatRows,
        state: {selectedRowIds}
    } = useTable(
        {
            data,
            columns
        },
        useRowSelect
    );

    return (
        <>
            <Table {...getTableProps()}>
                <TableHead>
                    {headerGroups.map(headerGroup => (
                        // a key is generated by the getHeadderGroupProps method and all further
                        // prop getters that are used when a key is necessary
                        // tslint:disable-next-line:jsx-key
                        <TableRow {...headerGroup.getHeaderGroupProps()}>
                            {headerGroup.headers.map(column => (
                                // tslint:disable-next-line:jsx-key
                                <TableHeadCell {...column.getHeaderProps()}>
                                    {column.render('Header')}
                                </TableHeadCell>
                            ))}
                        </TableRow>
                    ))}
                </TableHead>
                <TableBody {...getTableBodyProps()}>
                    {rows.map(row => {
                        prepareRow(row);
                        return (
                            // TODO: another ts-lint issue?! ðŸ˜­
                            // tslint:disable-next-line:jsx-key
                            <TableRow isSelected={row.isSelected} {...row.getRowProps()}>
                                {row.cells.map(cell => (
                                    // tslint:disable-next-line:jsx-key
                                    <TableBodyCell {...cell.getCellProps()}>
                                        <Typography>{cell.render('Cell')}</Typography>
                                    </TableBodyCell>
                                ))}
                            </TableRow>
                        );
                    })}
                </TableBody>
            </Table>

            <section>
                <pre>
                    <code>
                        {JSON.stringify(
                            {
                                selectedRowIds,
                                'selectedFlatRows[].original': selectedFlatRows.map(d => d.original),
                            },
                            null,
                            2
                        )}
                    </code>
                </pre>
            </section>
        </>
    );
};
SelectableRows.storyName = 'Selectable Rows with React-Table';

// export const SortingByColumn = () => {};
// SortingByColumn.storyName = 'Sorting by Column with React-Table';
//
// export const Pagination = () => {};
// Pagination.storyName = 'Pagination with React-Table';
//
// export const StructuredView = () => {};
// StructuredView.storyName = 'Structured View with React-Table';
//
// export const KitchenSink = () => {};
// KitchenSink.storyName = 'Everything and the Kitchen Sink with React-Table';
