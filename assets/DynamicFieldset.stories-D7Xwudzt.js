import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{B as f}from"./Button-Cjq0zrP_.js";import{R as v,r as D}from"./index-G8LIXM5I.js";import{c as d}from"./clsx-B-dksMZM.js";/* empty css                 */import{S as N}from"./Switch-BJ4eHner.js";import{T as y}from"./Typography-C8hU4Ja4.js";import{S}from"./Add-BLw4h-Kv.js";import{S as h}from"./MoreVert-DsReYBZM.js";import{S as R}from"./Language-B4Y52-CS.js";import{F as k}from"./Field-Dr8Vxxzs.js";import{F as w}from"./FieldSelector-B--cAP--.js";import{I}from"./Input-B5kM0s63.js";import{C as g}from"./Chip-DESNhL41.js";import"./index-yBjzXJbu.js";/* empty css               */import"./Loader-DsiRlRl8.js";import"./_commonjsHelpers-CqkleIqs.js";/* empty css              */import"./HandleDrag-D6n6KY9w.js";import"./SearchInput-5ftwiOLF.js";import"./Search-DSeLwkIx.js";const s=v.forwardRef(({id:n,label:t,helper:a,children:l,className:p,buttons:o,checked:r=!1,onChange:V,...j},q)=>e.jsxs("fieldset",{ref:q,id:n,className:d("moonstone-dynamic-fieldset",r&&"moonstone-dynamic-fieldset_open","flexCol_nowrap",p),"aria-checked":r,...j,children:[e.jsxs("legend",{className:d("flexRow_nowrap","flexFluid","alignCenter"),children:[e.jsx(y,{isNowrap:!0,className:"flexRow_nowrap flexFluid alignCenter",component:"label",htmlFor:"moonstone-dynamic-fieldset-switch",variant:"heading",weight:"bold",children:t}),e.jsx(N,{id:"moonstone-dynamic-fieldset-switch",checked:r,onChange:V}),o&&o]}),a&&e.jsx(y,{variant:"caption",className:d("moonstone-fieldset_helper"),children:a}),r&&l&&e.jsx("div",{className:d("moonstone-fieldset_children","flexCol_nowrap"),children:l})]}));s.displayName="ControlledDynamicFieldset";try{s.displayName="ControlledDynamicFieldset",s.__docgenInfo={description:"",displayName:"ControlledDynamicFieldset",props:{label:{defaultValue:null,description:"Fieldset label",name:"label",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Fieldset's id",name:"id",required:!0,type:{name:"string"}},buttons:{defaultValue:null,description:"Fieldset action(s)",name:"buttons",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},helper:{defaultValue:null,description:"Fieldset helper",name:"helper",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Define fieldset field(s)",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},checked:{defaultValue:{value:"false"},description:"Whether dynamic fieldset is checked or not",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Dynamic fieldset's function onChange",name:"onChange",required:!0,type:{name:"(event: ChangeEvent<HTMLInputElement>) => void"}}}}}catch{}const u=({defaultChecked:n,onChange:t,...a})=>{const[l,p]=D.useState(n),o=r=>{p(r.currentTarget.checked),typeof t<"u"&&t(r)};return e.jsx(s,{checked:l,onChange:o,...a})};u.displayName="UncontrolledDynamicFieldset";try{u.displayName="UncontrolledDynamicFieldset",u.__docgenInfo={description:"",displayName:"UncontrolledDynamicFieldset",props:{label:{defaultValue:null,description:"Fieldset label",name:"label",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Fieldset's id",name:"id",required:!0,type:{name:"string"}},buttons:{defaultValue:null,description:"Fieldset action(s)",name:"buttons",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},helper:{defaultValue:null,description:"Fieldset helper",name:"helper",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Define fieldset field(s)",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},defaultChecked:{defaultValue:null,description:"Whether dynamic fieldset is checked by default",name:"defaultChecked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Dynamic fieldset's function onChange",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>) => void"}}}}}catch{}const i=({checked:n,onChange:t,...a})=>typeof n>"u"?e.jsx(u,{onChange:t,...a}):e.jsx(s,{checked:n,onChange:t,...a});i.displayName="DynamicFieldset";try{i.displayName="DynamicFieldset",i.__docgenInfo={description:"",displayName:"DynamicFieldset",props:{label:{defaultValue:null,description:"Fieldset label",name:"label",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Fieldset's id",name:"id",required:!0,type:{name:"string"}},buttons:{defaultValue:null,description:"Fieldset action(s)",name:"buttons",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},helper:{defaultValue:null,description:"Fieldset helper",name:"helper",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Define fieldset field(s)",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},checked:{defaultValue:null,description:"Whether dynamic fieldset is checked or not",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Dynamic fieldset's function onChange",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>) => void) & ((event: ChangeEvent<HTMLInputElement>) => void)"}},defaultChecked:{defaultValue:null,description:"Whether dynamic fieldset is checked by default",name:"defaultChecked",required:!1,type:{name:"boolean"}}}}}catch{}const A="data:text/markdown;base64,",{useArgs:T}=__STORYBOOK_MODULE_PREVIEW_API__,re={title:"Components/Fieldset/DynamicFieldset",component:i,tags:["beta"],parameters:{layout:"padded",actions:{argTypesRegex:"^on.*"},notes:{markdown:A}},args:{id:"dynamic-fieldset",label:"Dynamic fieldset",helper:"dynamic fieldset information",buttons:e.jsx(f,{icon:e.jsx(h,{}),variant:"ghost"}),children:e.jsx(k,{id:"field",label:"Field",chips:e.jsxs(e.Fragment,{children:[e.jsx(g,{color:"accent",label:"Required"}),e.jsx(g,{icon:e.jsx(R,{}),label:"Shared by all languages"})]}),buttons:e.jsxs(e.Fragment,{children:[e.jsx(f,{icon:e.jsx(S,{}),label:"Add"}),e.jsx(f,{icon:e.jsx(h,{}),variant:"ghost"})]}),helper:"information",children:e.jsx(w,{selector:e.jsx(I,{size:"big",placeholder:"Input value"})})})},argTypes:{buttons:{control:!1},children:{control:!1}}},c={},m={render:n=>{const[,t]=T(),a=l=>{n.onChange(l),t({value:l.target.value})};return e.jsx(i,{...n,onChange:a})}};var C,_,x;c.parameters={...c.parameters,docs:{...(C=c.parameters)==null?void 0:C.docs,source:{originalSource:"{}",...(x=(_=c.parameters)==null?void 0:_.docs)==null?void 0:x.source}}};var F,b,E;m.parameters={...m.parameters,docs:{...(F=m.parameters)==null?void 0:F.docs,source:{originalSource:`{
  render: args => {
    const [, setArgs] = useArgs();
    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      args.onChange(e);
      setArgs({
        value: e.target.value
      });
    };
    return <DynamicFieldset {...args} onChange={onChange} />;
  }
}`,...(E=(b=m.parameters)==null?void 0:b.docs)==null?void 0:E.source}}};const se=["Uncontrolled","Controlled"];export{m as Controlled,c as Uncontrolled,se as __namedExportsOrder,re as default};
