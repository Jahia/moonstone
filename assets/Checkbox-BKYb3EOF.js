import{j as a}from"./jsx-runtime-Cf8x2fCZ.js";import{r as b}from"./index-G8LIXM5I.js";import{c as d}from"./clsx-B-dksMZM.js";const p=e=>e.charAt(0).toUpperCase()+e.slice(1),o=({className:e,checked:n=!1,indeterminate:t=!1,size:u="default",isDisabled:i,isReadOnly:c,onChange:r,value:l,...g})=>{const m=b.useRef(null);return a.jsxs("div",{className:d("moonstone-checkbox",e),children:[a.jsx("input",{...g,ref:m,className:d("moonstone-checkbox_input",`moonstone-checkbox_size${p(u)}`),type:"checkbox",value:l,checked:n,disabled:i,"aria-readonly":c,"aria-checked":t?"mixed":n,onChange:y=>{var f;return typeof r=="function"&&r(y,l,(f=m.current)==null?void 0:f.checked)}}),a.jsx("svg",{className:d("moonstone-checkbox_icon",`moonstone-checkbox_size${p(u)}`),viewBox:"0 0 21 21",children:t?a.jsx("path",{d:"M4.5 10.5L16.5 10.5",strokeLinecap:"round"}):a.jsx("path",{d:"M5 10.75L8.5 14.25L16 6",strokeLinecap:"round"})})]})};o.displayName="ControlledCheckbox";try{o.displayName="ControlledCheckbox",o.__docgenInfo={description:"",displayName:"ControlledCheckbox",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Size of the Checkbox",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},checked:{defaultValue:{value:"false"},description:"Whether the checkbox should be checked. Must be used in conjunction with onChange. Define the component as controlled when it set (controlled)",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkbox value",name:"onChange",required:!0,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}},indeterminate:{defaultValue:{value:"false"},description:"Whether the checkbox should be indeterminate (controlled)",name:"indeterminate",required:!1,type:{name:"boolean"}}}}}catch{}const s=({defaultChecked:e=!1,onChange:n,value:t,...u})=>{const[i,c]=b.useState(e);return a.jsx(o,{...u,value:t,checked:i,onChange:r=>{const l=!i;c(l),typeof n=="function"&&n(r,t,l)}})};s.displayName="UncontrolledCheckbox";try{s.displayName="UncontrolledCheckbox",s.__docgenInfo={description:"",displayName:"UncontrolledCheckbox",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Size of the Checkbox",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkbox value",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}}}}}catch{}const h=({checked:e,...n})=>typeof e>"u"?a.jsx(s,{...n}):a.jsx(o,{checked:e,onChange:n.onChange,...n});h.displayName="Checkbox";try{h.displayName="Checkbox",h.__docgenInfo={description:"",displayName:"Checkbox",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Size of the Checkbox",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},checked:{defaultValue:null,description:"Whether the checkbox should be checked. Must be used in conjunction with onChange. Define the component as controlled when it set (controlled)",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkbox value",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void) & ((event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void)"}},indeterminate:{defaultValue:null,description:"Whether the checkbox should be indeterminate (controlled)",name:"indeterminate",required:!1,type:{name:"boolean"}}}}}catch{}export{h as C,p as c};
