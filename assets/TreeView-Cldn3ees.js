import{j as o}from"./jsx-runtime-Cf8x2fCZ.js";import{R as f,r as $}from"./index-G8LIXM5I.js";import{c as m}from"./clsx-B-dksMZM.js";import{S as H}from"./ChevronDown-DW4Cg-no.js";import{S as J}from"./ChevronRight-CtX5Dnjk.js";import{S as X,a as G}from"./CheckboxUnchecked-CIfxf0rQ.js";import{L as Q}from"./Loader-DsiRlRl8.js";import{T as Y}from"./Typography-D0S_EBmN.js";const Z=(t,l,a=!1,i=0)=>({onClick:a?void 0:l,onKeyUp:n=>{n.code==="Space"&&t(n),n.code==="Enter"&&(n.preventDefault(),l&&!a?l(n):t(n)),n.code==="ArrowLeft"&&t(n),n.code==="ArrowRight"&&t(n)},disabled:a,tabIndex:i}),N=(t,l,a,i=!1)=>{if(!(!t&&!i))return o.jsx("i",{className:m("flexRow","alignCenter",a),children:t&&o.jsx(t.type,{...t.props,size:l,"aria-label":t.type.name||"moonstone-treeView-icon"})})},ee=({data:t,openedItems:l=[],selectedItems:a=[],highlightedItems:i=[],showCheckbox:r=!1,onClickItem:n,onDoubleClickItem:d,onContextMenuItem:g,onOpenItem:C,onCloseItem:u,isReversed:c=!1,component:b="ul",itemComponent:S="li",size:h="default",isPadVirtualizedRow:j=!1,...O},z)=>{const x=t.filter(v=>v.children&&v.children.length>0).length===0;function M(v,p,B){return v.map(e=>{var R;const k=!!(e.hasChildren||e.children&&e.children.length!==0),P=!!e.iconStart,U=!!e.iconEnd,y=e.isClosable!==!1,V=!!l.includes(e.id)||!y,D=!!e.isLoading,w=!!a.includes(e.id),_=!!(i.includes(e.id)&&!w),L=!e.isDisabled&&!e.isReadonly,I=s=>{V?u(e,s):C(e,s)},F=s=>{n?n(e,s,I):I(s)},W=s=>{d&&d(e,s)},A=s=>{g&&g(e,s)},K=m("flexRow_between","alignCenter","moonstone-treeView_item",{"moonstone-small":h==="small","moonstone-selected":w&&!r,"moonstone-highlighted":_,"moonstone-reversed":c,"moonstone-readonly":e.isReadonly,"moonstone-disabled":e.isDisabled});return[f.createElement(S,{role:"treeitem","aria-selected":w,"aria-expanded":V,"aria-busy":D,"aria-current":_?"page":null,"aria-level":p+1,key:`${p}-${e.id}`,style:{"--treeItem-depth":p,...(R=e==null?void 0:e.treeItemProps)==null?void 0:R.style},onDoubleClick:W,onContextMenu:A,...Z(I,F,!L),...e.treeItemProps},o.jsxs("div",{className:K,children:[y&&k&&o.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle"),onClick:I,children:D?o.jsx(Q,{isReversed:c,size:"small"}):V?o.jsx(H,{size:h}):o.jsx(J,{size:h})}),!x&&!k&&o.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle")}),j&&x&&!y&&o.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle")}),o.jsxs("div",{className:m("flexRow_nowrap","alignCenter","flexFluid","moonstone-treeView_itemLabel",e.className),children:[r?w?o.jsx(X,{className:"moonstone-treeView_itemIconStart",role:"checkbox",color:"blue","aria-checked":"true"}):o.jsx(G,{className:"moonstone-treeView_itemIconStart",role:"checkbox","aria-checked":"false"}):N(e.iconStart,"small","moonstone-treeView_itemIconStart",B),o.jsx(Y,{isNowrap:!0,className:m("flexFluid"),component:"span",variant:h==="default"?"body":"caption",...e.typographyOptions,children:e.label}),U&&N(e.iconEnd,"small")]})]})),...V&&e.children?M(e.children,y?p+1:p,P):[]]})}return f.createElement(b,{ref:z,role:"tree","aria-multiselectable":r,...O},M(t,0,!1))},E=f.forwardRef(ee);try{E.displayName="ControlledTreeView",E.__docgenInfo={description:"",displayName:"ControlledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:{value:"[]"},description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:{value:"[]"},description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:{value:"false"},description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:{value:"false"},description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:{value:"ul"},description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:{value:"li"},description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:{value:"false"},description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:{value:"[]"},description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!0,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!0,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const te=({defaultOpenedItems:t=[],onCloseItem:l,onOpenItem:a,...i},r)=>{const[n,d]=$.useState(t),g=u=>{d(c=>[...c,u.id]),typeof a<"u"&&a(u)},C=u=>{d(c=>c.filter(b=>b!==u.id)),typeof l<"u"&&l(u)};return o.jsx(E,{ref:r,openedItems:n,onOpenItem:g,onCloseItem:C,...i})},T=f.forwardRef(te);try{T.displayName="UncontrolledTreeView",T.__docgenInfo={description:"",displayName:"UncontrolledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},defaultOpenedItems:{defaultValue:{value:"[]"},description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const ne=({openedItems:t,defaultOpenedItems:l,data:a,onOpenItem:i,onCloseItem:r,...n},d)=>!Array.isArray(a)||a.length<1?null:typeof t>"u"?o.jsx(T,{defaultOpenedItems:l,data:a,onOpenItem:i,onCloseItem:r,...n}):o.jsx(E,{ref:d,openedItems:t,data:a,onOpenItem:i,onCloseItem:r,...n}),q=f.forwardRef(ne);q.displayName="TreeView";try{q.displayName="TreeView",q.__docgenInfo={description:"",displayName:"TreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:null,description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},defaultOpenedItems:{defaultValue:null,description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}}}}}catch{}export{q as T};
