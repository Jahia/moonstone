import{j as i}from"./jsx-runtime-Cf8x2fCZ.js";import{R as p,r as U}from"./index-G8LIXM5I.js";import{c as m}from"./clsx-B-dksMZM.js";import{o as Q}from"./onArrowNavigation-DJ1kLiB7.js";import{S as Y}from"./ChevronDown-DW4Cg-no.js";import{S as Z}from"./ChevronRight-CtX5Dnjk.js";import{S as ee,a as te}from"./CheckboxUnchecked-CIfxf0rQ.js";import{L as ne}from"./Loader-DsiRlRl8.js";import{T as oe}from"./Typography-CgHbMZIy.js";const ae=t=>typeof t=="function",q=(...t)=>{const l={},a={};return t.forEach(r=>{Object.entries(r).forEach(([o,n])=>{o.startsWith("on")&&ae(n)?(a[o]||(a[o]=[]),a[o].push(n)):l[o]=n})}),Object.entries(a).forEach(([r,o])=>{o.length===1?l[r]=o[0]:o.length>1&&(l[r]=n=>{for(const s of o)if(s(n),n.defaultPrevented)break})}),l};try{q.displayName="mergeHandlers",q.__docgenInfo={description:"",displayName:"mergeHandlers",props:{}}}catch{}const le=(t,l,a=!1,r=0)=>({onKeyUp:n=>{n.code==="Space"&&t(n),n.code==="Enter"&&(n.preventDefault(),l&&!a?l(n):t(n)),n.code==="ArrowLeft"&&t(n),n.code==="ArrowRight"&&t(n)},disabled:a,tabIndex:r}),P=(t,l,a,r=!1)=>{if(!(!t&&!r))return i.jsx("i",{className:m("flexRow","alignCenter",a),children:t&&i.jsx(t.type,{"aria-label":t.type.name||"moonstone-treeView-icon",...t.props,size:l,className:m(`moonstone-icon_${l}`,t.props.className)})})},ie=({data:t,openedItems:l=[],selectedItems:a=[],highlightedItems:r=[],showCheckbox:o=!1,onClickItem:n,onDoubleClickItem:s,onContextMenuItem:h,onOpenItem:v,onCloseItem:u,isReversed:c=!1,component:T="ul",itemComponent:L="li",size:y="default",isPadVirtualizedRow:W=!1,...F},A)=>{const _=t.filter(V=>V.children&&V.children.length>0).length===0,k=U.useRef(new Map);function D(V,f,H){return V.map(e=>{var z,B;let g=k.current.get(e.id);g||(g=p.createRef(),k.current.set(e.id,g));const R=!!(e.hasChildren||e.children&&e.children.length!==0),K=!!e.iconStart,$=!!e.iconEnd,w=e.isClosable!==!1,E=!!l.includes(e.id)||!w,N=!!e.isLoading,I=!!a.includes(e.id),S=!!(r.includes(e.id)&&!I),j=!e.isDisabled&&!e.isReadonly,b=d=>{v&&u&&(E?u(e,d):v(e,d))},O=d=>{n?n(e,d,b):b(d)},J=d=>{s&&s(e,d)},X=d=>{h&&h(e,d)},G=m("flexRow_between","alignCenter","moonstone-treeView_item",{"moonstone-small":y==="small","moonstone-selected":I&&!o,"moonstone-highlighted":S,"moonstone-reversed":c,"moonstone-readonly":e.isReadonly,"moonstone-disabled":e.isDisabled});return[p.createElement(L,{ref:g,role:"treeitem","aria-selected":I,"aria-expanded":((z=e.children)==null?void 0:z.length)>0?E:null,"aria-busy":N,"aria-current":S?"page":null,"aria-level":f+1,key:`${f}-${e.id}`,style:{"--treeItem-depth":f,...(B=e==null?void 0:e.treeItemProps)==null?void 0:B.style},onDoubleClick:J,onContextMenu:X,...q(Q({ref:g}),le(b,O,!j)),...e.treeItemProps},i.jsxs("div",{className:G,children:[w&&R&&i.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle"),"data-testid":"treeitem-toggle-icon",onClick:b,children:N?i.jsx(ne,{isReversed:c,size:"small"}):E?i.jsx(Y,{size:y}):i.jsx(Z,{size:y})}),!_&&!R&&i.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle")}),W&&_&&!w&&i.jsx("div",{className:m("flexRow","alignCenter","moonstone-treeView_itemToggle")}),i.jsxs("div",{className:m("flexRow_nowrap","alignCenter","flexFluid","moonstone-treeView_itemLabel",e.className),onClick:j?O:void 0,children:[o?I?i.jsx(ee,{className:"moonstone-treeView_itemIconStart",role:"checkbox",color:"blue","aria-checked":"true"}):i.jsx(te,{className:"moonstone-treeView_itemIconStart",role:"checkbox","aria-checked":"false"}):P(e.iconStart,"small","moonstone-treeView_itemIconStart",H),i.jsx(oe,{isNowrap:!0,className:m("flexFluid"),component:"span",variant:y==="default"?"body":"caption",...e.typographyOptions,children:e.label}),$&&P(e.iconEnd,"small")]})]})),...E&&e.children?D(e.children,w?f+1:f,K):[]]})}return p.createElement(T,{ref:A,role:"tree","aria-multiselectable":o,...F},D(t,0,!1))},C=p.forwardRef(ie);try{C.displayName="ControlledTreeView",C.__docgenInfo={description:"",displayName:"ControlledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:{value:"[]"},description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:{value:"[]"},description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:{value:"false"},description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:{value:"false"},description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:{value:"ul"},description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:{value:"li"},description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:{value:"false"},description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:{value:"[]"},description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!0,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!0,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const re=({defaultOpenedItems:t=[],onCloseItem:l,onOpenItem:a,...r},o)=>{const[n,s]=U.useState(t),h=u=>{s(c=>[...c,u.id]),typeof a<"u"&&a(u)},v=u=>{s(c=>c.filter(T=>T!==u.id)),typeof l<"u"&&l(u)};return i.jsx(C,{ref:o,openedItems:n,onOpenItem:h,onCloseItem:v,...r})},M=p.forwardRef(re);try{M.displayName="UncontrolledTreeView",M.__docgenInfo={description:"",displayName:"UncontrolledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},defaultOpenedItems:{defaultValue:{value:"[]"},description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const se=({openedItems:t,defaultOpenedItems:l,data:a,onOpenItem:r,onCloseItem:o,...n},s)=>!Array.isArray(a)||a.length<1?null:typeof t>"u"?i.jsx(M,{defaultOpenedItems:l,data:a,onOpenItem:r,onCloseItem:o,...n}):i.jsx(C,{ref:s,openedItems:t,data:a,onOpenItem:r,onCloseItem:o,...n}),x=p.forwardRef(se);x.displayName="TreeView";try{x.displayName="TreeView",x.__docgenInfo={description:"",displayName:"TreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:null,description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},defaultOpenedItems:{defaultValue:null,description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}}}}}catch{}export{x as T};
