import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{c as o}from"./clsx-B-dksMZM.js";import{T as d}from"./Typography-D0S_EBmN.js";const r=({component:l,iconStart:n,iconEnd:t,iconSize:s="default",typographyProps:a,className:i,children:c,...m})=>{const p=l||"div";return e.jsx(p,{className:o("moonstone-IconTextIcon","flexRow_nowrap","alignCenter",i),...m,children:e.jsxs(e.Fragment,{children:[n&&e.jsx(n.type,{size:s,className:o("moonstone-IconTextIcon_iconStart",n.props.className),...n.props}),e.jsx(d,{isNowrap:!0,component:"span",className:o("flexFluid",a==null?void 0:a.className),...a,children:c}),t&&e.jsx(t.type,{size:s,className:o("moonstone-IconTextIcon_iconEnd",t.props.className),...t.props})]})})};try{r.displayName="IconTextIcon",r.__docgenInfo={description:"",displayName:"IconTextIcon",props:{iconStart:{defaultValue:null,description:"Optional icon element to render on the left/before children",name:"iconStart",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},iconEnd:{defaultValue:null,description:"Optional icon element to render on the right/after children",name:"iconEnd",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},iconSize:{defaultValue:{value:"default"},description:'Which size of icon to render; is "default" by default ;)',name:"iconSize",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"small"'},{value:'"default"'}]}},typographyProps:{defaultValue:null,description:"Any Typography props to pass to the Typography component within",name:"typographyProps",required:!1,type:{name:"BasicTypographyProps"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Any styles to define inline on the component",name:"style",required:!1,type:{name:"CSSProperties"}},children:{defaultValue:null,description:"Children to render between the icons",name:"children",required:!1,type:{name:"ReactNode"}},component:{defaultValue:null,description:"The HTML tag used to render the component",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}export{r as I};
