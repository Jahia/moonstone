import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{r as u}from"./index-G8LIXM5I.js";/* empty css                  */import{D as m}from"./Dropdown-CMrFVMEU.js";import{c as h}from"./clsx-B-dksMZM.js";import{B as x}from"./SearchInput-B5d-1pc8.js";import{S as f}from"./Person-BnbJvbfQ.js";import{S as C,a as S}from"./SiteWeb-BMgb_OuM.js";import"./index-yBjzXJbu.js";import"./_commonjsHelpers-CqkleIqs.js";import"./Button-PNeZ7oHi.js";/* empty css               */import"./Loader-DsiRlRl8.js";import"./Typography-C8hU4Ja4.js";import"./Tag-CXHcMMTy.js";import"./Search-DSeLwkIx.js";import"./ChevronDown-DW4Cg-no.js";import"./MenuItem--HqnKiEf.js";import"./ListItem-Crrcgnf0.js";import"./TreeView-BRFIKiCq.js";import"./ChevronRight-CtX5Dnjk.js";import"./CheckboxUnchecked-CIfxf0rQ.js";import"./Separator-ChTYNnEP.js";const a=({searchContext:t,...n})=>{const r=typeof t<"u"&&e.jsx(t.type,{...t.props,variant:"ghost",size:"small",className:h(t.props.className,"moonstone-searchContextInput_element")},"searchcontext");return e.jsx(x,{...n,isShowClearButton:!0,prefixComponents:[r],icon:null,role:"search",size:"big"})};a.displayName="SearchContextInput";try{a.displayName="SearchContextInput",a.__docgenInfo={description:"",displayName:"SearchContextInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},searchContext:{defaultValue:null,description:"Slot to display a dropdown to manage search context",name:"searchContext",required:!0,type:{name:"ReactElement<DropdownProps, string | JSXElementConstructor<any>>"}}}}}catch{}const A={title:"Components/Input",component:a,decorators:[t=>e.jsx("div",{style:{width:"50vw"},children:e.jsx(t,{})})],parameters:{layout:"centered"},args:{placeholder:"Placeholder text",defaultValue:"Default value"},argTypes:{onChange:{action:"onChange"},onClick:{action:"onClick"},onBlur:{action:"onBlur"},onFocus:{action:"onFocus"}}},l=[{label:"Global users",value:"globalUser",iconStart:e.jsx(f,{})},{label:"Media",value:"media",iconStart:e.jsx(C,{})},{label:"Site",value:"site",iconStart:e.jsx(S,{})}],o={render:t=>{const[n,s]=u.useState(l[0]),r=(g,d)=>{s(d)};return e.jsx("section",{className:"storyWrapper",children:e.jsx(a,{searchContext:e.jsx(m,{data:l,label:n.label,icon:n.iconStart,value:n.value,onChange:r}),placeholder:"Search and press Enter",...t})})}};var i,c,p;o.parameters={...o.parameters,docs:{...(i=o.parameters)==null?void 0:i.docs,source:{originalSource:`{
  render: args => {
    const [contextOption, setContextOption] = useState(searchContextData[0]);
    const handleDropdownOnChange = (e: React.MouseEvent, item: DropdownDataOption) => {
      setContextOption(item);
    };
    return <section className="storyWrapper">
                <SearchContextInput searchContext={<Dropdown data={searchContextData} label={contextOption.label} icon={contextOption.iconStart} value={contextOption.value} onChange={handleDropdownOnChange} />} placeholder="Search and press Enter" {...args} />
            </section>;
  }
}`,...(p=(c=o.parameters)==null?void 0:c.docs)==null?void 0:p.source}}};const G=["SearchContext"];export{o as SearchContext,G as __namedExportsOrder,A as default};
