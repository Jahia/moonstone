import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{R as w}from"./index-G8LIXM5I.js";import{c as r}from"./clsx-B-dksMZM.js";import{S as C,a as j}from"./Image-DYAdcomu.js";import{T as c}from"./Typography-B9xY8qhe.js";const q=({thumbnail:a,thumbnailType:t,thumbnailAlt:i})=>a?typeof a=="string"?e.jsx("img",{className:r(`moonstone-cardSelector_thumbnail_${t}`),src:a,alt:i,"data-testid":"cardSelector-thumbnail"}):e.jsx(a.type,{...a.props,className:r(`moonstone-cardSelector_thumbnail_${t}`,a.props.className),"data-testid":"cardSelector-thumbnail"}):e.jsx(j,{size:"big",color:"gray","data-testid":"cardSelector-thumbnail"}),m=w.forwardRef(({displayName:a,systemName:t,chips:i,information:d,thumbnail:h,thumbnailType:b="preview",thumbnailAlt:g,id:n,className:N,isDisabled:o=!1,isReadOnly:s=!1,cardAction:u,hasError:S=!1,errorMessage:x,onClick:_,...p},f)=>{const v=r("moonstone-cardSelector",(o||s)&&"moonstone-cardSelector_disabled","flexFluid","flexRow_nowrap","alignCenter",N),y=l=>{s||o||(_(l),l.currentTarget.blur())};return S?e.jsxs("button",{ref:f,id:n,type:"button",className:r("moonstone-cardSelector_error",(o||s)&&"moonstone-cardSelector_disabled","flexRow_center","alignCenter"),disabled:o||s,onClick:l=>y(l),...p,children:[e.jsx(C,{}),e.jsx(c,{isNowrap:!0,variant:"caption",component:"span",children:x})]}):e.jsxs("button",{ref:f,id:n,type:"button",className:v,"aria-label":a,disabled:o||s,onClick:l=>y(l),...p,children:[e.jsx("figure",{className:r("moonstone-cardSelector_thumbnail","flexRow_center","alignCenter"),children:e.jsx(q,{thumbnail:h,thumbnailType:b,thumbnailAlt:g})}),e.jsxs("div",{className:r("moonstone-cardSelector_body","flexFluid","flexCol_nowrap"),children:[e.jsxs("div",{className:r("flexRow_nowrap flexFluid"),children:[a&&e.jsx(c,{isNowrap:!0,"data-testid":"cardSelector-displayName",id:n&&`${n}-displayName`,className:r("moonstone-cardSelector_displayName"),variant:"body",component:"span",children:a}),t&&t!==a&&e.jsxs(c,{isNowrap:!0,id:n&&`${n}-systemName`,className:"moonstone-cardSelector_systemName","data-testid":"cardSelector-systemName",variant:"body",component:"span",children:["(",t,")"]})]}),(i||d)&&e.jsxs("div",{className:r("flexRow_nowrap"),children:[i,d&&e.jsx(c,{isNowrap:!0,variant:"caption",component:"span",className:r("moonstone-cardSelector_information"),"data-testid":"cardSelector-information",children:d})]})]}),u&&e.jsx("div",{className:"moonstone-cardSelector_actions flexRow_nowrap alignCenter",children:u})]})});m.displayName="CardSelector";try{m.displayName="CardSelector",m.__docgenInfo={description:"",displayName:"CardSelector",props:{className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Required id",name:"id",required:!0,type:{name:"string"}},onClick:{defaultValue:null,description:"Function trigger on click",name:"onClick",required:!1,type:{name:"MouseEventHandler<Element>"}},isDisabled:{defaultValue:{value:"false"},description:"Define if the item is disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:{value:"false"},description:"Define if the item is readOnly",name:"isReadOnly",required:!1,type:{name:"boolean"}},thumbnail:{defaultValue:null,description:`Url of the thumbnail or icon component
If a string is provided, it will be used as the src of an img element.
If a React element is provided, it will be rendered as the thumbnail.`,name:"thumbnail",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},thumbnailAlt:{defaultValue:null,description:"Alt attribute for thumbnail",name:"thumbnailAlt",required:!1,type:{name:"string"}},thumbnailType:{defaultValue:{value:"preview"},description:"Thumbnail type",name:"thumbnailType",required:!1,type:{name:"enum",value:[{value:'"icon"'},{value:'"preview"'}]}},displayName:{defaultValue:null,description:"CardSelector displayName",name:"displayName",required:!0,type:{name:"string"}},systemName:{defaultValue:null,description:"CardSelector systemName",name:"systemName",required:!1,type:{name:"string"}},chips:{defaultValue:null,description:"CardSelector chips",name:"chips",required:!1,type:{name:"ReactNode | ReactNode[]"}},information:{defaultValue:null,description:"Optional information to display to describe the item",name:"information",required:!1,type:{name:"string"}},cardAction:{defaultValue:null,description:"Possible actions to add to the item e.g orderable with arrows, closeable with X icon...",name:"cardAction",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},hasError:{defaultValue:{value:"false"},description:"Error cardSelector variant",name:"hasError",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"Error cardSelector message",name:"errorMessage",required:!1,type:{name:"string"}}}}}catch{}export{m as C};
