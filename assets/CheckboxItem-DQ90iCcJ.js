import{j as a}from"./jsx-runtime-Cf8x2fCZ.js";import{r as f,R as I}from"./index-G8LIXM5I.js";import{c as d}from"./clsx-B-dksMZM.js";import{C as _}from"./Checkbox-6NbUHW55.js";import{T as h}from"./Typography-B9xY8qhe.js";const E=f.createContext(void 0),i=({className:t,id:e,value:s,label:r,description:l,isDisabled:c,isReadOnly:m,onChange:o,name:C,...v})=>{const n=I.useContext(E),b=typeof n>"u"?c:n.isDisabled,y=typeof n>"u"?m:n.isReadOnly,q=typeof n>"u"?C:n.name,V=f.useRef(null);return a.jsxs(h,{ref:V,className:d("moonstone-checkboxItem flexCol",t),"aria-readonly":y,"aria-disabled":b,variant:"body",weight:"default",component:"label",children:[a.jsxs("div",{className:d("flexRow alignCenter"),children:[a.jsx(_,{"aria-labelledby":`${e}-label`,"aria-describedby":l?`${e}-description`:null,value:s,isReadOnly:y,isDisabled:b,name:q,onChange:(g,x,k)=>{typeof(n==null?void 0:n.onChange)=="function"&&n.onChange(g,x,k),typeof o=="function"&&o(g,x,k)},...v}),a.jsx(h,{id:`${e}-label`,variant:"body",component:"span",className:d("moonstone-checkboxItem_label"),children:r})]}),l&&a.jsx(h,{id:`${e}-description`,variant:"caption",weight:"default",component:"span",className:d("moonstone-checkboxItem_description flexRow"),children:l})]})};i.displayName="ControlledCheckboxItem";try{i.displayName="ControlledCheckboxItem",i.__docgenInfo={description:"",displayName:"ControlledCheckboxItem",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Identifier added to the input element",name:"id",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Checkbox description",name:"description",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Checkbox label",name:"label",required:!0,type:{name:"string"}},checked:{defaultValue:null,description:"Whether the checkbox should be checked. Must be used with onChange function to update the checked state (controlled)",name:"checked",required:!0,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkboxItem value",name:"onChange",required:!0,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}}}}}catch{}const u=({defaultChecked:t=!1,onChange:e,...s})=>{const[r,l]=f.useState(t);return a.jsx(i,{...s,checked:r,onChange:(c,m)=>{const o=!r;l(o),typeof e=="function"&&e(c,m,o)}})};u.displayName="UncontrolledCheckboxItem";try{u.displayName="UncontrolledCheckboxItem",u.__docgenInfo={description:"",displayName:"UncontrolledCheckboxItem",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Identifier added to the input element",name:"id",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Checkbox description",name:"description",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Checkbox label",name:"label",required:!0,type:{name:"string"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkboxItem value",name:"onChange",required:!1,type:{name:"(event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void"}}}}}catch{}const p=({checked:t,...e})=>typeof t>"u"?a.jsx(u,{...e}):a.jsx(i,{checked:t,onChange:e.onChange,...e});p.displayName="CheckboxItem";try{p.displayName="CheckboxItem",p.__docgenInfo={description:"",displayName:"CheckboxItem",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Function triggered on focus of the checkbox value",name:"onFocus",required:!1,type:{name:"FocusEventHandler<Element>"}},onBlur:{defaultValue:null,description:"Function triggered when the checkbox value loses focus",name:"onBlur",required:!1,type:{name:"FocusEventHandler<Element>"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the checkbox can be selected but not changed by the user",name:"isReadOnly",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Identifier added to the input element",name:"id",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Checkbox description",name:"description",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Checkbox label",name:"label",required:!0,type:{name:"string"}},checked:{defaultValue:null,description:"Whether the checkbox should be checked. Must be used with onChange function to update the checked state (controlled)",name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Function triggered on change of the checkboxItem value",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void) & ((event: ChangeEvent<HTMLInputElement>, value: string, checked: boolean) => void)"}}}}}catch{}export{p as C,E as a};
