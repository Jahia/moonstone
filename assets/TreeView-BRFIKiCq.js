import{j as n}from"./jsx-runtime-Cf8x2fCZ.js";import{R as f,r as H}from"./index-G8LIXM5I.js";import{c as u}from"./clsx-B-dksMZM.js";import{S as J}from"./ChevronDown-DW4Cg-no.js";import{S as X}from"./ChevronRight-CtX5Dnjk.js";import{S as G,a as K}from"./CheckboxUnchecked-CIfxf0rQ.js";import{L as Q}from"./Loader-DsiRlRl8.js";import{T as Y}from"./Typography-C8hU4Ja4.js";const N=(t,l,o,i=!1)=>{if(!(!t&&!i))return n.jsx("i",{className:u("flexRow","alignCenter",o),children:t&&n.jsx(t.type,{...t.props,size:l,"aria-label":t.type.name||"moonstone-treeView-icon"})})},Z=({data:t,openedItems:l=[],selectedItems:o=[],highlightedItems:i=[],showCheckbox:r=!1,onClickItem:s=()=>{},onDoubleClickItem:m=()=>{},onContextMenuItem:I=()=>{},onOpenItem:E=()=>{},onCloseItem:d=()=>{},isReversed:c=!1,component:C="ul",itemComponent:S="li",size:g="default",isPadVirtualizedRow:j=!1,...O},z)=>{const x=t.filter(h=>h.children&&h.children.length>0).length===0;function k(h,p,B){return h.map(e=>{var R;const M=!!(e.hasChildren||e.children&&e.children.length!==0),P=!!e.iconStart,F=!!e.iconEnd,v=e.isClosable!==!1,y=!!l.includes(e.id)||!v,D=!!e.isLoading,V=!!o.includes(e.id),_=!!(i.includes(e.id)&&!V),L=!e.isDisabled&&!e.isReadonly,b=a=>{y?d(e,a):E(e,a)},W=a=>{s.length===0&&b(a),s(e,a,b)},U=a=>{m(e,a)},A=a=>{I(e,a)},$=u("flexRow_between","alignCenter","moonstone-treeView_item",{"moonstone-small":g==="small","moonstone-selected":V&&!r,"moonstone-highlighted":_,"moonstone-reversed":c,"moonstone-readonly":e.isReadonly,"moonstone-disabled":e.isDisabled});return[f.createElement(S,{role:"treeitem","aria-selected":V,"aria-expanded":y,"aria-busy":D,"aria-current":_?"page":null,"aria-level":p+1,key:`${p}-${e.id}`,style:{"--treeItem-depth":p,...(R=e==null?void 0:e.treeItemProps)==null?void 0:R.style},...e.treeItemProps},n.jsxs("div",{className:$,children:[v&&M&&n.jsx("div",{className:u("flexRow","alignCenter","moonstone-treeView_itemToggle"),onClick:b,children:D?n.jsx(Q,{isReversed:c,size:"small"}):y?n.jsx(J,{size:g}):n.jsx(X,{size:g})}),!x&&!M&&n.jsx("div",{className:u("flexRow","alignCenter","moonstone-treeView_itemToggle")}),j&&x&&!v&&n.jsx("div",{className:u("flexRow","alignCenter","moonstone-treeView_itemToggle")}),n.jsxs("div",{className:u("flexRow_nowrap","alignCenter","flexFluid","moonstone-treeView_itemLabel",e.className),onClick:L?W:void 0,onDoubleClick:U,onContextMenu:A,children:[r?V?n.jsx(G,{className:"moonstone-treeView_itemIconStart",role:"checkbox",color:"blue","aria-checked":"true"}):n.jsx(K,{className:"moonstone-treeView_itemIconStart",role:"checkbox","aria-checked":"false"}):N(e.iconStart,"small","moonstone-treeView_itemIconStart",B),n.jsx(Y,{isNowrap:!0,className:u("flexFluid"),component:"span",variant:g==="default"?"body":"caption",...e.typographyOptions,children:e.label}),F&&N(e.iconEnd,"small")]})]})),...y&&e.children?k(e.children,v?p+1:p,P):[]]})}return f.createElement(C,{ref:z,role:"tree","aria-multiselectable":r,...O},k(t,0,!1))},w=f.forwardRef(Z);try{w.displayName="ControlledTreeView",w.__docgenInfo={description:"",displayName:"ControlledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:{value:"[]"},description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:{value:"[]"},description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:{value:"false"},description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:{value:"() => undefined"},description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:{value:"() => undefined"},description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:{value:"() => undefined"},description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:{value:"false"},description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:{value:"ul"},description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:{value:"li"},description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:{value:"false"},description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:{value:"[]"},description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:{value:"() => undefined"},description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:{value:"() => undefined"},description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const ee=({defaultOpenedItems:t=[],onCloseItem:l,onOpenItem:o,...i},r)=>{const[s,m]=H.useState(t),I=d=>{m(c=>[...c,d.id]),typeof o<"u"&&o(d)},E=d=>{m(c=>c.filter(C=>C!==d.id)),typeof l<"u"&&l(d)};return n.jsx(w,{ref:r,openedItems:s,onOpenItem:I,onCloseItem:E,...i})},T=f.forwardRef(ee);try{T.displayName="UncontrolledTreeView",T.__docgenInfo={description:"",displayName:"UncontrolledTreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},defaultOpenedItems:{defaultValue:{value:"[]"},description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}}}}}catch{}const te=({openedItems:t,defaultOpenedItems:l,data:o,onOpenItem:i,onCloseItem:r,...s},m)=>!Array.isArray(o)||o.length<1?null:typeof t>"u"?n.jsx(T,{defaultOpenedItems:l,data:o,onOpenItem:i,onCloseItem:r,...s}):n.jsx(w,{ref:m,openedItems:t,data:o,onOpenItem:i,onCloseItem:r,...s}),q=f.forwardRef(te);q.displayName="TreeView";try{q.displayName="TreeView",q.__docgenInfo={description:"",displayName:"TreeView",props:{data:{defaultValue:null,description:"Data to generate the tree",name:"data",required:!0,type:{name:"TreeViewData[]"}},selectedItems:{defaultValue:null,description:"Selected items' ids",name:"selectedItems",required:!1,type:{name:"string[]"}},highlightedItems:{defaultValue:null,description:"IDs of the highlighted items",name:"highlightedItems",required:!1,type:{name:"string[]"}},showCheckbox:{defaultValue:null,description:"Show checkbox for selected items",name:"showCheckbox",required:!1,type:{name:"boolean"}},onClickItem:{defaultValue:null,description:`Trigger by clicking on node.
In the parameters, access to the current node, event, and a method to toggle the node open/close is given.`,name:"onClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>, toggleNode?: (e: MouseEvent<Element, MouseEvent>) => void) => void"}},onDoubleClickItem:{defaultValue:null,description:"Trigger by double clicking on node",name:"onDoubleClickItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},onContextMenuItem:{defaultValue:null,description:"Trigger by right clicking on node",name:"onContextMenuItem",required:!1,type:{name:"(node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void"}},isReversed:{defaultValue:null,description:"Whether the component should use reversed colors, it useful with dark background",name:"isReversed",required:!1,type:{name:"boolean"}},component:{defaultValue:null,description:"Component used for the list (ul)",name:"component",required:!1,type:{name:"string"}},itemComponent:{defaultValue:null,description:"Component used for every item (li)",name:"itemComponent",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"TreeView row sizes",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"default"'}]}},isPadVirtualizedRow:{defaultValue:null,description:"When using virtualization row may require padding if they become detached from its parent",name:"isPadVirtualizedRow",required:!1,type:{name:"boolean"}},openedItems:{defaultValue:null,description:"Opened items ids. If set, component is controlled",name:"openedItems",required:!1,type:{name:"string[]"}},onOpenItem:{defaultValue:null,description:"Trigger on opening node",name:"onOpenItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},onCloseItem:{defaultValue:null,description:"Trigger on opening node",name:"onCloseItem",required:!1,type:{name:"((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void) & ((node: TreeViewData, e?: MouseEvent<Element, MouseEvent>) => void)"}},defaultOpenedItems:{defaultValue:null,description:"Opened items ids by default, when uncontrolled",name:"defaultOpenedItems",required:!1,type:{name:"string[]"}}}}}catch{}export{q as T};
