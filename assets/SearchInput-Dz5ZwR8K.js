import{j as n}from"./jsx-runtime-Cf8x2fCZ.js";import{r as y}from"./index-G8LIXM5I.js";import{c as h}from"./clsx-B-dksMZM.js";import{S as O,a as j}from"./Search-DSeLwkIx.js";import{B as k}from"./Button-CKNtF3rk.js";const a=({value:e="",id:t,role:l,placeholder:f,isDisabled:i=!1,isReadOnly:s=!1,className:o,size:v="default",icon:m,variant:q="outlined",isShowClearButton:x,prefixComponents:E,postfixComponents:I,onClick:_,onKeyPress:C,onKeyUp:R,onClear:u,onChange:g,onBlur:w,onFocus:S,focusOnField:V=!1,...W})=>{const N=e!=="",r=y.useRef(null),B=h("moonstone-baseInput",`moonstone-${v}`,`moonstone-${q}`,o);return y.useEffect(()=>{V&&r.current.focus({preventScroll:!0})},[V]),x&&!u&&(u=()=>{r.current.value="";const d=new Event("change");r.current.dispatchEvent(d),g(d)}),n.jsxs("div",{className:B,role:l,onClick:_,children:[m&&n.jsx("div",{className:h("moonstone-baseInput_icon","flexRow_nowrap","alignCenter"),children:n.jsx(m.type,{...m.props,focusable:"false"})}),n.jsxs("div",{className:"flexRow alignCenter flexFluid moonstone-baseInput_elementsWrapper",children:[E,n.jsx("input",{ref:r,className:h("moonstone-baseInput-element",`moonstone-${v}`),type:"text",value:e,role:l==="search"&&"searchbox",id:t,placeholder:f,disabled:i,readOnly:s,onChange:g,onBlur:w,onFocus:S,onKeyPress:d=>{console.warn("onKeyPress is deprecated and will be removed in a future release. You should use onKeyUp instead."),typeof C=="function"&&C(d)},onKeyUp:R,...W}),I]}),u&&N&&!i&&!s&&n.jsx(k,{className:"moonstone-baseInput_clearButton flexRow_center alignCenter",variant:"ghost",icon:n.jsx(O,{}),"aria-label":"Reset",onClick:u})]})};a.displayName="ControlledBaseInput";try{a.displayName="ControlledBaseInput",a.__docgenInfo={description:"",displayName:"ControlledBaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:{value:"false"},description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:{value:"false"},description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:{value:"false"},description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:{value:"outlined"},description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component(s) to render before the input field.",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},postfixComponents:{defaultValue:null,description:"Component(s) to render after the input field.",name:"postfixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},value:{defaultValue:{value:""},description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}}}}}catch{}const p=({defaultValue:e,onChange:t,...l})=>{const[f,i]=y.useState(e),s=o=>{i(o.target.value),typeof t<"u"&&t(o)};return n.jsx(a,{value:f,onChange:s,...l})};p.displayName="UncontrolledBaseInput";try{p.displayName="UncontrolledBaseInput",p.__docgenInfo={description:"",displayName:"UncontrolledBaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component(s) to render before the input field.",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},postfixComponents:{defaultValue:null,description:"Component(s) to render after the input field.",name:"postfixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}}}}}catch{}const c=({value:e,...t})=>typeof e>"u"?n.jsx(p,{...t}):n.jsx(a,{value:e,...t});c.displayName="BaseInput";try{c.displayName="BaseInput",c.__docgenInfo={description:"",displayName:"BaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component(s) to render before the input field.",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},postfixComponents:{defaultValue:null,description:"Component(s) to render after the input field.",name:"postfixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},value:{defaultValue:null,description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}}}}}catch{}const b=({...e})=>n.jsx(c,{...e,isShowClearButton:!0,role:"search",icon:n.jsx(j,{"aria-hidden":!0})});b.displayName="SearchInput";try{b.displayName="SearchInput",b.__docgenInfo={description:"",displayName:"SearchInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},value:{defaultValue:null,description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component(s) to render before the input field.",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},postfixComponents:{defaultValue:null,description:"Component(s) to render after the input field.",name:"postfixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}}}}}catch{}export{c as B,b as S};
