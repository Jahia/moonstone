import{j as n}from"./jsx-runtime-Cf8x2fCZ.js";import{r as h}from"./index-G8LIXM5I.js";import{c as m}from"./clsx-B-dksMZM.js";import{B as S}from"./Button-Cjq0zrP_.js";import{S as B,a as O}from"./Search-DSeLwkIx.js";const a=({value:e="",id:t,role:p,placeholder:c,isDisabled:l=!1,isReadOnly:i=!1,className:s,size:b="default",icon:f,variant:C="outlined",isShowClearButton:q,prefixComponents:x,onClick:I,onKeyPress:_,onClear:u,onChange:v,onBlur:E,onFocus:w,focusOnField:g=!1,...R})=>{const W=e!=="",o=h.useRef(null),N=m("moonstone-baseInput",`moonstone-${b}`,`moonstone-${C}`,s);return h.useEffect(()=>{g&&o.current.focus({preventScroll:!0})},[g]),q&&!u&&(u=()=>{o.current.value="";const V=new Event("change");o.current.dispatchEvent(V),v(V)}),n.jsxs("div",{className:N,onClick:I,children:[f&&n.jsx("div",{className:m("moonstone-baseInput_icon","flexRow_nowrap","alignCenter"),children:n.jsx(f.type,{...f.props,focusable:"false"})}),n.jsxs("div",{className:"flexRow alignCenter flexFluid moonstone-baseInput_elementsWrapper",children:[x,n.jsx("input",{ref:o,className:m("moonstone-baseInput-element",`moonstone-${b}`),type:"text",role:p,value:e,id:t,placeholder:c,disabled:l,readOnly:i,onChange:v,onBlur:E,onFocus:w,onKeyPress:_,...R})]}),u&&W&&!l&&!i&&n.jsx(S,{className:"moonstone-baseInput_clearButton flexRow_center alignCenter",variant:"ghost",icon:n.jsx(B,{}),"aria-label":"Reset",onClick:u})]})};a.displayName="ControlledBaseInput";try{a.displayName="ControlledBaseInput",a.__docgenInfo={description:"",displayName:"ControlledBaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:{value:"false"},description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:{value:"false"},description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:{value:"false"},description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"default"},description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:{value:"outlined"},description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},value:{defaultValue:{value:""},description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}}}}}catch{}const r=({defaultValue:e,onChange:t,...p})=>{const[c,l]=h.useState(e),i=s=>{l(s.target.value),typeof t<"u"&&t(s)};return n.jsx(a,{value:c,onChange:i,...p})};r.displayName="UncontrolledBaseInput";try{r.displayName="UncontrolledBaseInput",r.__docgenInfo={description:"",displayName:"UncontrolledBaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}}}}}catch{}const d=({value:e,...t})=>typeof e>"u"?n.jsx(r,{...t}):n.jsx(a,{value:e,...t});d.displayName="BaseInput";try{d.displayName="BaseInput",d.__docgenInfo={description:"",displayName:"BaseInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},role:{defaultValue:null,description:"Role of the input",name:"role",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},icon:{defaultValue:null,description:"Which icon to use at the beginning of the input",name:"icon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},isShowClearButton:{defaultValue:null,description:"Whether the input should have a clear button. If onClear is not specified, clear button will set the value to empty value",name:"isShowClearButton",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},value:{defaultValue:null,description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}}}}}catch{}const y=({...e})=>n.jsx(d,{...e,isShowClearButton:!0,role:"search",icon:n.jsx(O,{"aria-hidden":!0})});y.displayName="SearchInput";try{y.displayName="SearchInput",y.__docgenInfo={description:"",displayName:"SearchInput",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLInputElement>"}},placeholder:{defaultValue:null,description:"Initial placeholder text to appear in the input field",name:"placeholder",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Whether the size of the input should be default or big",name:"size",required:!1,type:{name:"enum",value:[{value:'"big"'},{value:'"default"'}]}},value:{defaultValue:null,description:"Value to exist in the input field. Define the component as controlled when it set. (Controlled)",name:"value",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Additional classname",name:"className",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the component should be disabled",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input should be read-only. It's still submittable.",name:"isReadOnly",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:`Which icon to use at the beginning of the input
@deprecatedValues 'text' and 'search' use specific component instead`,name:"variant",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"text"'},{value:'"ghost"'},{value:'"outlined"'}]}},onClear:{defaultValue:null,description:"Function - when passed in, the Cancel icon appears at the end of the input and its click event is passed back when the Cancel icon is clicked",name:"onClear",required:!1,type:{name:"MouseEventHandler<Element>"}},focusOnField:{defaultValue:null,description:"Whether the input should be focused when displayed.",name:"focusOnField",required:!1,type:{name:"boolean"}},prefixComponents:{defaultValue:null,description:"Component",name:"prefixComponents",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>[]"}}}}}catch{}export{d as B,y as S};
